package it.colletta.controller;

import com.auth0.jwt.JWT;
import org.junit.Before;
import org.junit.Test;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Date;

import static com.auth0.jwt.algorithms.Algorithm.HMAC512;
import static it.colletta.security.SecurityConstants.EXPIRATION_TIME;
import static it.colletta.security.SecurityConstants.SECRET;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

public class ExerciseControllerTest {

  private MockMvc mvc;
  private String jwt;
  //private String token =
          //"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmcmFuY2VzY29vQGdtYWlsLmNvbSIsImV4cCI6MTU1NjE5NDQ0MywianRpIjoiNWNiNDc1MzEwNjQ2YjMxMDVmOGY5YjA0In0.muPEBotJgEiDh5Jf24jHTbPsay2HshEbTf4KPOimygxa9y5x494aHlhUnZiJIUgl3PbuwDsUqRlqF9pOni6jvA";

  @Before
  public void setup() {
    /**
     * Return a JWT token for testing class
     *
     * @param username the fake user name for test
     * @return jwt the token generated by the string passed
     */
    jwt =
            ("Bearer") + JWT.create()
                    .withJWTId("test@test.it")
                    .withSubject("test")
                    .withExpiresAt(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                    .sign(HMAC512(SECRET.getBytes()));
    mvc = MockMvcBuilders.standaloneSetup(new ExerciseController()).build();
  }

  /*@Test
  public void ExerciseUserTodoTest() {
    try {
      // JwtAuthenticationFilter.createToken("prova@prova.it");
      mvc.perform(MockMvcRequestBuilders.get("/exercises/user-todo").header("Authorization", jwt))
              .andExpect(status().isOk());
    } catch (Exception e) {
      e.printStackTrace();
    }
  } */

  @Test
  public void ExerciseUserDone() {
    try {
      mvc.perform(MockMvcRequestBuilders.get("/exercises/done").header("Authorization", jwt))
              .andExpect(status().isOk());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  /*
  @Test
  public void InsertExerciseTest(){
    try{
      mvc.perform(MockMvcRequestBuilders
              .post("/exercises/insert-exercise")
              .header("Authorization", token)
              .content("")
              )
              .andExpect(status().isOk());
    } catch (Exception e) {
      e.printStackTrace();
    }
  } */
}
